name: NIDRA Release

# This workflow runs only on tags
on:
  push:
    tags:
      - 'v*'

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies strategically
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pyinstaller
          echo "--- Phase 1: Heavy Binaries ---"
          pip install numpy scipy pandas matplotlib onnxruntime pillow
          echo "--- Phase 2: Medium & Complex Dependencies ---"
          pip install mne sympy
          echo "--- Phase 3: All Remaining Dependencies & Project ---"
          pip install .
        shell: bash

      - name: Download Models from Hugging Face
        run: |
          mkdir -p NIDRA/models
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/ez6.onnx -o NIDRA/models/ez6.onnx
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/ez6moe.onnx -o NIDRA/models/ez6moe.onnx
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/u-sleep-nsrr-2024.onnx -o NIDRA/models/u-sleep-nsrr-2024.onnx
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/u-sleep-nsrr-2024_eeg.onnx -o NIDRA/models/u-sleep-nsrr-2024_eeg.onnx
        shell: bash

      - name: Download Example Data from Hugging Face
        run: |
          mkdir -p examples/test_data_zmax
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/EEG_L.edf -o examples/test_data_zmax/EEG_L.edf
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/EEG_R.edf -o examples/test_data_zmax/EEG_R.edf
        shell: bash

      - name: Build Executable with PyInstaller
        run: pyinstaller NIDRA.spec

      - name: Sign Executable
        env:
          CODE_SIGNING_CERTIFICATE_BASE64: ${{ secrets.CODE_SIGNING_CERTIFICATE_BASE64 }}
          CODE_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
        if: env.CODE_SIGNING_CERTIFICATE_BASE64 != '' && env.CODE_SIGNING_CERTIFICATE_PASSWORD != ''
        run: |
          echo "${{ secrets.CODE_SIGNING_CERTIFICATE_BASE64 }}" > certificate.pfx.b64
          certutil -decode certificate.pfx.b64 certificate.pfx
          signtool sign /f certificate.pfx /p "${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "dist/NIDRA.exe"
        shell: bash

      - name: Upload Windows Executable
        uses: actions/upload-artifact@v4
        with:
          name: NIDRA-Windows
          path: dist/NIDRA.exe

  build-macos:
    runs-on: macos-13
    timeout-minutes: 30

    steps:
     - name: Check out repository
       uses: actions/checkout@v4

     - name: Set up Python
       uses: actions/setup-python@v5
       with:
         python-version: '3.11'

     - name: Cache pip packages
       uses: actions/cache@v4
       with:
         path: ~/.cache/pip
         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
         restore-keys: |
           ${{ runner.os }}-pip-

     - name: Install dependencies
       run: |
         python -m pip install --upgrade pip setuptools wheel
         pip install pyinstaller
         pip install .
       shell: bash

     - name: Download Models from Hugging Face
       run: |
         mkdir -p NIDRA/models
         curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/ez6.onnx -o NIDRA/models/ez6.onnx
         curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/ez6moe.onnx -o NIDRA/models/ez6moe.onnx
         curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/u-sleep-nsrr-2024.onnx -o NIDRA/models/u-sleep-nsrr-2024.onnx
         curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/u-sleep-nsrr-2024_eeg.onnx -o NIDRA/models/u-sleep-nsrr-2024_eeg.onnx
       shell: bash

     - name: Download Example Data from Hugging Face
       run: |
         mkdir -p examples/test_data_zmax
         curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/EEG_L.edf -o examples/test_data_zmax/EEG_L.edf
         curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/EEG_R.edf -o examples/test_data_zmax/EEG_R.edf
       shell: bash

     - name: Build Executable with PyInstaller
       run: pyinstaller NIDRA.spec

     - name: Sign Executable
       env:
         MACOS_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
         MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
       if: env.MACOS_CERTIFICATE_BASE64 != '' && env.MACOS_CERTIFICATE_PASSWORD != ''
       run: |
         echo "${{ secrets.MACOS_CERTIFICATE_BASE64 }}" > certificate.p12.b64
         base64 -d certificate.p12.b64 > certificate.p12
         security create-keychain -p "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" build.keychain
         security default-keychain -s build.keychain
         security unlock-keychain -p "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" build.keychain
         security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
         security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" build.keychain
         codesign --force --deep --sign "Developer ID Application: YOUR_NAME (TEAM_ID)" "dist/NIDRA.app"
       shell: bash

     - name: Package macOS App
       run: (cd dist && zip -r NIDRA-macOS.zip NIDRA.app)
       shell: bash

     - name: Upload macOS Executable
       uses: actions/upload-artifact@v4
       with:
         name: NIDRA-macOS
         path: dist/NIDRA-macOS.zip

  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
     - name: Check out repository
       uses: actions/checkout@v4

     - name: Set up Python
       uses: actions/setup-python@v5
       with:
         python-version: '3.11'

     - name: Install appimage-builder
       run: |
         python -m pip install --upgrade "pip<24" "setuptools<69" wheel
         sudo apt-get update
         sudo apt-get install -y libfuse2
         pip install appimage-builder

     - name: Download Models from Hugging Face
       run: |
         mkdir -p NIDRA/models
         curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/ez6.onnx -o NIDRA/models/ez6.onnx
         curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/ez6moe.onnx -o NIDRA/models/ez6moe.onnx
         curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/u-sleep-nsrr-2024.onnx -o NIDRA/models/u-sleep-nsrr-2024.onnx
         curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/u-sleep-nsrr-2024_eeg.onnx -o NIDRA/models/u-sleep-nsrr-2024_eeg.onnx
       shell: bash

     - name: Download Example Data from Hugging Face
       run: |
         mkdir -p examples/test_data_zmax
         curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/EEG_L.edf -o examples/test_data_zmax/EEG_L.edf
         curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/EEG_R.edf -o examples/test_data_zmax/EEG_R.edf
       shell: bash

     - name: Build AppImage
       run: appimage-builder --recipe AppImageBuilder.yml

     - name: Upload Linux AppImage
       uses: actions/upload-artifact@v4
       with:
         name: NIDRA-Linux
         path: NIDRA*.AppImage*

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/NIDRA-Windows/NIDRA.exe
            artifacts/NIDRA-macOS/NIDRA-macOS.zip
            artifacts/NIDRA-Linux/NIDRA-x86_64.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}