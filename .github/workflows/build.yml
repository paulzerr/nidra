name: NIDRA Windows Build

# This workflow runs only on the 'master' branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-windows:
    # Use the current, supported Windows runner. This is the standard for ensuring
    # broad compatibility with both Windows 10 and Windows 11.
    runs-on: windows-latest
    timeout-minutes: 30 # A generous timeout for the entire job

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # The cache key is based on the OS and the contents of requirements.txt
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # The proven robust installation strategy to prevent memory/resource failures
      - name: Install dependencies strategically
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

          echo "--- Phase 1: Heavy Binaries ---"
          pip install numpy scipy pandas matplotlib onnxruntime pillow

          echo "--- Phase 2: Medium & Complex Dependencies ---"
          pip install mne sympy

          echo "--- Phase 3: All Remaining Dependencies & Project ---"
          pip install -r requirements.txt
          pip install .
        shell: bash

      - name: Download Models from Hugging Face
        run: |
          mkdir -p NIDRA/models
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/ez6.onnx -o NIDRA/models/ez6.onnx
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/ez6moe.onnx -o NIDRA/models/ez6moe.onnx
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/u-sleep-nsrr-2024.onnx -o NIDRA/models/u-sleep-nsrr-2024.onnx
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/u-sleep-nsrr-2024_eeg.onnx -o NIDRA/models/u-sleep-nsrr-2024_eeg.onnx
        shell: bash

      - name: Build Executable with PyInstaller
        # This runs your .spec file to build the application
        run: pyinstaller NIDRA.spec

      - name: Upload Windows Executable (Internal Artifact)
        uses: actions/upload-artifact@v4
        with:
          # A descriptive name for the downloadable artifact
          name: NIDRA-Windows
          path: dist/

      - name: Upload Public Test Artifact to GoFile
        id: gofile_upload
        run: |
          # Upload the file and capture the JSON response
          response=$(curl -F "file=@dist/NIDRA.exe" https://store1.gofile.io/uploadFile)
          echo "GoFile Response: $response"
          # Extract the download page URL from the JSON response
          download_url=$(echo $response | grep -o '"downloadPage":"[^"]*' | cut -d'"' -f4)
          echo "Public Download Link: $download_url"
          # Make the URL available to subsequent steps if needed
          echo "::set-output name=download_url::$download_url"
        shell: bash
