name: NIDRA Build

# This workflow runs only on the 'master' branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-windows:
    # Use the current, supported Windows runner. This is the standard for ensuring
    # broad compatibility with both Windows 10 and Windows 11.
    runs-on: windows-latest
    timeout-minutes: 30 # A generous timeout for the entire job

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # The cache key is based on the OS and the contents of requirements.txt
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # The proven robust installation strategy to prevent memory/resource failures
      - name: Install dependencies strategically
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pyinstaller

          echo "--- Phase 1: Heavy Binaries ---"
          pip install numpy scipy pandas matplotlib onnxruntime pillow

          echo "--- Phase 2: Medium & Complex Dependencies ---"
          pip install mne sympy

          echo "--- Phase 3: All Remaining Dependencies & Project ---"
          pip install .
        shell: bash

      - name: Download Models from Hugging Face
        run: |
          mkdir -p NIDRA/models
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/ez6.onnx -o NIDRA/models/ez6.onnx
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/ez6moe.onnx -o NIDRA/models/ez6moe.onnx
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/u-sleep-nsrr-2024.onnx -o NIDRA/models/u-sleep-nsrr-2024.onnx
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/u-sleep-nsrr-2024_eeg.onnx -o NIDRA/models/u-sleep-nsrr-2024_eeg.onnx
        shell: bash

      - name: Download Example Data from Hugging Face
        run: |
          mkdir -p examples/test_data_zmax
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/EEG_L.edf -o examples/test_data_zmax/EEG_L.edf
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/EEG_R.edf -o examples/test_data_zmax/EEG_R.edf
        shell: bash

      - name: Build Executable with PyInstaller
        # This runs your .spec file to build the application
        run: pyinstaller NIDRA.spec



      - name: Sign Executable
        # CORRECTED SECTION: Secrets are mapped to environment variables first.
        env:
          CODE_SIGNING_CERTIFICATE_BASE64: ${{ secrets.CODE_SIGNING_CERTIFICATE_BASE64 }}
          CODE_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
        # The 'if' condition now correctly checks the environment variables.
        if: env.CODE_SIGNING_CERTIFICATE_BASE64 != '' && env.CODE_SIGNING_CERTIFICATE_PASSWORD != ''
        run: |
          echo "${{ secrets.CODE_SIGNING_CERTIFICATE_BASE64 }}" > certificate.pfx.b64
          certutil -decode certificate.pfx.b64 certificate.pfx
          signtool sign /f certificate.pfx /p "${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "dist/NIDRA.exe"
        shell: bash

      - name: Upload Windows Executable (Internal Artifact)
        uses: actions/upload-artifact@v4
        with:
          # A descriptive name for the downloadable artifact
          name: NIDRA-Windows
          path: dist/

      - name: Upload Public Test Artifact to GoFile
        id: gofile_upload
        run: |
          # Upload the file and capture the JSON response
          response=$(curl -F "file=@dist/NIDRA.exe" https://store1.gofile.io/uploadFile)
          echo "GoFile Response: $response"
          # Extract the download page URL from the JSON response
          download_url=$(echo $response | grep -o '"downloadPage":"[^"]*' | cut -d'"' -f4)
          echo "Public Download Link: $download_url"
          # Make the URL available to subsequent steps if needed
          echo "download_url=$download_url" >> $GITHUB_OUTPUT
        shell: bash


  build_wheels:
    name: Build wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Legacy macOS (x86_64) for Python 3.10-3.13, compatible with macOS 10.15+
          - os: macos-latest
            cibw-build: 'cp310-* cp311-* cp312-* cp313-*'
            cibw-macos-min: '10.15'
            numpy-constraint: 'numpy<2'
            onnx-constraint: 'onnxruntime==1.16.3'

          # Modern macOS (>=13.3) for Python 3.10
          - os: macos-14
            cibw-build: 'cp310-*'
            cibw-macos-min: '13.3'
            numpy-constraint: 'numpy>=2.0.0'
            onnx-constraint: 'onnxruntime>=1.19.0'

          # Windows for Python 3.10
          - os: windows-latest
            cibw-build: 'cp310-*'
            numpy-constraint: 'numpy>=2.0.0'
            onnx-constraint: 'onnxruntime>=1.19.0'

          # Linux for Python 3.10 (builds sdist by default)
          - os: ubuntu-latest
            cibw-build: 'cp310-*'
            numpy-constraint: 'numpy>=2.0.0'
            onnx-constraint: 'onnxruntime>=1.19.0'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: python -m pip install --upgrade pip cibuildwheel toml

      - name: Create pre-build script to update dependencies
        run: |
          cat << 'EOF' > update_deps.py
          import toml
          import os
          import sys
          pyproject_path = 'pyproject.toml'
          numpy_constraint = os.environ['NUMPY_CONSTRAINT']
          onnx_constraint = os.environ['ONNX_CONSTRAINT']
          github_run_number = os.environ.get('GITHUB_RUN_NUMBER')
          github_ref = os.environ.get('GITHUB_REF')
          with open(pyproject_path, 'r') as f:
              data = toml.load(f)
          if github_ref == 'refs/heads/master' and github_run_number:
              base_version = str(data['project']['version'])
              if '.dev' in base_version:
                  base_version = base_version.split('.dev')[0]
              new_version = f"{base_version}.dev{github_run_number}"
              data['project']['version'] = new_version
              print(f"Set version to {new_version}", file=sys.stderr)
          dependencies = data['project']['dependencies']
          dependencies = [d for d in dependencies if not d.startswith('numpy') and not d.startswith('onnxruntime')]
          dependencies.append(numpy_constraint)
          dependencies.append(onnx_constraint)
          data['project']['dependencies'] = dependencies
          with open(pyproject_path, 'w') as f:
              toml.dump(data, f)
          print("Updated pyproject.toml dependencies:", file=sys.stderr)
          for dep in data['project']['dependencies']:
              print(f"- {dep}", file=sys.stderr)
          EOF
        shell: bash

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.cibw-build }}
          CIBW_MACOS_MIN: ${{ matrix.cibw-macos-min }}
          CIBW_BEFORE_BUILD: 'python -m pip install toml && python update_deps.py'
          CIBW_ENVIRONMENT: 'NUMPY_CONSTRAINT="${{ matrix.numpy-constraint }}" ONNX_CONSTRAINT="${{ matrix.onnx-constraint }}" GITHUB_RUN_NUMBER="${{ github.run_number }}" GITHUB_REF="${{ github.ref }}"'
          CIBW_ENVIRONMENT_LINUX: 'NUMPY_CONSTRAINT="${{ matrix.numpy-constraint }}" ONNX_CONSTRAINT="${{ matrix.onnx-constraint }}" GITHUB_RUN_NUMBER="${{ github.run_number }}" GITHUB_REF="${{ github.ref }}"'

      - name: Upload distribution package
        uses: actions/upload-artifact@v4
        with:
          name: python-dist-${{ matrix.os }}
          path: wheelhouse/

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    needs: [build_wheels, build-windows] # Depends on both wheels and the exe build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Download all wheel packages
        uses: actions/download-artifact@v4
        with:
          pattern: python-dist-*
          path: dist/
          merge-multiple: true

      - name: List downloaded files
        run: ls -R dist

      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/