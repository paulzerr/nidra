name: NIDRA Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_and_publish_sdist:
    name: Build and publish sdist
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Trusted publishing
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: python -m pip install --upgrade pip build toml

      - name: Create script to update version
        run: |
          cat << 'EOF' > update_version.py
          import toml
          import os
          import sys
          pyproject_path = 'pyproject.toml'
          github_run_number = os.environ.get('GITHUB_RUN_NUMBER')
          github_ref = os.environ.get('GITHUB_REF')
          with open(pyproject_path, 'r') as f:
              data = toml.load(f)
          if github_ref == 'refs/heads/master' and github_run_number:
              base_version = str(data['project']['version'])
              if '.dev' in base_version:
                  base_version = base_version.split('.dev')[0]
              new_version = f"{base_version}.dev{github_run_number}"
              data['project']['version'] = new_version
              print(f"Set version to {new_version}", file=sys.stderr)
              with open(pyproject_path, 'w') as f:
                  toml.dump(data, f)
              print("Updated pyproject.toml with dev version", file=sys.stderr)
          EOF
        shell: bash

      - name: Update version in pyproject.toml
        run: python update_version.py
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_REF: ${{ github.ref }}

      - name: Clean dist directory
        run: rm -rf dist/

      - name: Build sdist
        run: python -m build --sdist

      - name: Publish distribution to TestPyPI
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 20 

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # The cache key is based on the OS and the contents of requirements.txt
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # robust installation strategy to prevent memory/resource failures
      - name: Install dependencies strategically
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pyinstaller

          echo "--- Phase 1: Heavy Binaries ---"
          pip install numpy scipy pandas matplotlib onnxruntime pillow

          echo "--- Phase 2: Medium & Complex Dependencies ---"
          pip install mne sympy

          echo "--- Phase 3: All Remaining Dependencies & Project ---"
          pip install .
        shell: bash

      - name: Download Models from Hugging Face
        run: |
          mkdir -p NIDRA/models
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/ez6.onnx -o NIDRA/models/ez6.onnx
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/ez6moe.onnx -o NIDRA/models/ez6moe.onnx
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/u-sleep-nsrr-2024.onnx -o NIDRA/models/u-sleep-nsrr-2024.onnx
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/u-sleep-nsrr-2024_eeg.onnx -o NIDRA/models/u-sleep-nsrr-2024_eeg.onnx
        shell: bash

      - name: Download Example Data from Hugging Face
        run: |
          mkdir -p examples/test_data_zmax
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/EEG_L.edf -o examples/test_data_zmax/EEG_L.edf
          curl -L https://huggingface.co/pzerr/NIDRA_models/resolve/main/EEG_R.edf -o examples/test_data_zmax/EEG_R.edf
        shell: bash

      - name: Build Executable with PyInstaller
        run: pyinstaller NIDRA.spec



      - name: Sign Executable
        env:
          CODE_SIGNING_CERTIFICATE_BASE64: ${{ secrets.CODE_SIGNING_CERTIFICATE_BASE64 }}
          CODE_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
        if: env.CODE_SIGNING_CERTIFICATE_BASE64 != '' && env.CODE_SIGNING_CERTIFICATE_PASSWORD != ''
        run: |
          echo "${{ secrets.CODE_SIGNING_CERTIFICATE_BASE64 }}" > certificate.pfx.b64
          certutil -decode certificate.pfx.b64 certificate.pfx
          signtool sign /f certificate.pfx /p "${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "dist/NIDRA.exe"
        shell: bash

      - name: Upload Windows Executable (Internal Artifact)
        uses: actions/upload-artifact@v4
        with:
          name: NIDRA-Windows
          path: dist/

      - name: Upload Public Test Artifact to GoFile
        id: gofile_upload
        run: |
          # Upload the file and capture the JSON response
          response=$(curl -F "file=@dist/NIDRA.exe" https://store1.gofile.io/uploadFile)
          echo "GoFile Response: $response"
          # Extract the download page URL from the JSON response
          download_url=$(echo $response | grep -o '"downloadPage":"[^"]*' | cut -d'"' -f4)
          echo "Public Download Link: $download_url"
          # Make the URL available to subsequent steps if needed
          echo "download_url=$download_url" >> $GITHUB_OUTPUT
        shell: bash