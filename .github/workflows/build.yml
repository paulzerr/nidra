name: PyInstaller Cross-Platform Build

on: [push, pull_request]

jobs:
  build:
    timeout-minutes: 20 # Increased timeout just in case
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Consider trying a different version like 3.11 if 3.10 fails

    # This 'cache' step is highly recommended. It saves downloaded packages between runs,
    # making your builds much faster and more reliable.
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

- name: Install dependencies in batches
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

        # Batch 1: Install the heaviest core packages first
        echo "Installing core scientific packages..."
        pip install numpy scipy pandas matplotlib

        # Batch 2: Install the package that was causing the failure
        echo "Installing MNE..."
        pip install mne

        # Batch 3: Install the rest of the packages from the requirements file
        # This will skip the already-installed packages.
        echo "Installing remaining packages..."
        pip install -r requirements.txt
      shell: bash

    - name: Build Executable (PyInstaller)
      run: pyinstaller NIDRA.spec 

    # Since GitHub Actions automatically saves the build output to 'dist/', 
    # the steps about creating VENVs and custom 'executables' folders are not needed.

    - name: ðŸ§ª Basic Executable Test (Smoke Test)
      run: |
        echo "Running smoke test on the built app..."
        # On all OSs, the main executable is placed in dist/
        # Check OS for the correct name
        if [ "$RUNNER_OS" == "Windows" ]; then
          ./dist/NIDRA.exe --version
        elif [ "$RUNNER_OS" == "macOS" ]; then
          ./dist/NIDRA --version # This may need to be a path to the app bundle on macOS
        else
          ./dist/NIDRA --version
        fi
        
    - name: ðŸ“¤ Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: NIDRA${{ matrix.os }}
        path: dist/ # PyInstaller output folder containing the exe, app, or binary
