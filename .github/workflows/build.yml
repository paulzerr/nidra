name: PyInstaller Cross-Platform Build

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        # Use your specific OS images
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' 
        
    - name: Install PyInstaller and Dependencies
      run: |
        python -m pip install --upgrade pip
        # 1. Install PyInstaller
        pip install pyinstaller
        # 2. Install dependencies using your project's setup (from pyproject.toml)
        # We assume the project root is the current directory (which it is in GitHub Actions)
        pip install . 
        
    - name: Build Executable (PyInstaller)
      # CRITICAL: If NIDRA.spec is at the root, use this path.
      run: pyinstaller NIDRA.spec 

    # Since GitHub Actions automatically saves the build output to 'dist/', 
    # the steps about creating VENVs and custom 'executables' folders are not needed.

    - name: ðŸ§ª Basic Executable Test (Smoke Test)
      run: |
        echo "Running smoke test on the built app..."
        # On all OSs, the main executable is placed in dist/
        # Check OS for the correct name
        if [ "$RUNNER_OS" == "Windows" ]; then
          ./dist/NIDRA.exe --version
        elif [ "$RUNNER_OS" == "macOS" ]; then
          ./dist/NIDRA --version # This may need to be a path to the app bundle on macOS
        else
          ./dist/NIDRA --version
        fi
        
    - name: ðŸ“¤ Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: NIDRA${{ matrix.os }}
        path: dist/ # PyInstaller output folder containing the exe, app, or binary
