name: NIDRA Windows Build

# This workflow runs only on the 'master' branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    # The matrix will create a separate job for each Windows version listed.
    # The default behavior is 'fail-fast: true', so if one job fails, the others will be canceled.
    strategy:
      matrix:
        include:
          - os: windows-2022 # Windows Server 2022
            artifact_name: NIDRA-Windows-Server-2022
          - os: windows-2019 # Windows Server 2019
            artifact_name: NIDRA-Windows-Server-2019

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30 # A generous timeout for the entire job

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # The most robust installation strategy to prevent memory spikes
      - name: Install dependencies strategically
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

          echo "--- Phase 1: Heavy Binaries ---"
          pip install numpy scipy pandas matplotlib onnxruntime pillow

          echo "--- Phase 2: Medium & Complex Dependencies ---"
          pip install mne sympy

          echo "--- Phase 3: All Remaining Dependencies & Project ---"
          pip install -r requirements.txt
          pip install .
        shell: bash

      - name: Build Executable with PyInstaller
        # This assumes your NIDRA.spec file is configured to create a one-dir build
        # and the final executable is named NIDRA.exe
        run: pyinstaller NIDRA.spec

      - name: Upload Windows Executable
        uses: actions/upload-artifact@v4
        with:
          # Use the artifact name defined in the matrix for clarity
          name: ${{ matrix.artifact_name }}
          # Upload the entire output folder created by PyInstaller (e.g., dist/NIDRA)
          path: dist/NIDRA
