name: PyInstaller Cross-Platform Build

# This workflow runs only on the 'master' branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    # Use a build matrix to run this job on all three major operating systems
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25 # Set a generous timeout

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Or your project's specific Python version

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # This multi-phase installation is critical to prevent resource exhaustion
      - name: Install dependencies strategically
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

          echo "--- Phase 1: Install heavy binary packages ---"
          pip install numpy scipy pandas matplotlib onnxruntime

          echo "--- Phase 2: Install MNE's smaller dependencies ---"
          pip install pooch decorator jinja2 lazy-loader tqdm

          echo "--- Phase 3: Install MNE itself ---"
          pip install mne

          echo "--- Phase 4: Install all remaining packages from requirements.txt ---"
          # This step ensures all external dependencies are met before your project is installed.
          pip install -r requirements.txt

          echo "--- Phase 5: Install the project itself using pyproject.toml ---"
          # Now that all dependencies are present, this step will be fast and low-memory.
          pip install .
        shell: bash

      - name: Build Executable with PyInstaller
        run: pyinstaller NIDRA.spec

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          # Name the artifact based on the OS for clarity
          name: NIDRA-app-${{ matrix.os }}
          # Upload the entire 'dist' folder created by PyInstaller
          path: dist/
