name: NIDRA Build

# This workflow runs only on the 'master' branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_wheels:
    name: Build wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Legacy macOS (x86_64) for Python 3.10-3.13, compatible with macOS 10.15+
          - os: macos-latest
            cibw-build: 'cp310-* cp311-* cp312-* cp313-*'
            cibw-macos-min: '10.15'
            numpy-constraint: 'numpy<2'
            onnx-constraint: 'onnxruntime==1.16.3'
            cibw-repair-command: 'delocate-wheel --require-archs {archs} -w {dest_dir} -v {wheel}'
            cibw-manylinux-image: ''
            cibw-before-build: 'install_name_tool -platform_version min 10.15 11.1 NIDRA/nidra_gui/neutralino/neutralino-mac_10 && python -m pip install --upgrade delocate toml && python update_deps.py'

          # Modern macOS (>=13.3) for Python 3.10
          - os: macos-14
            cibw-build: 'cp310-*'
            cibw-macos-min: '13.3'
            numpy-constraint: 'numpy>=2.0.0'
            onnx-constraint: 'onnxruntime>=1.19.0'
            cibw-repair-command: ''
            cibw-manylinux-image: ''
            cibw-before-build: 'python -m pip install toml && python update_deps.py'

          # Windows for Python 3.10
          - os: windows-latest
            cibw-build: 'cp310-*'
            numpy-constraint: 'numpy>=2.0.0'
            onnx-constraint: 'onnxruntime>=1.19.0'
            cibw-repair-command: ''
            cibw-manylinux-image: ''
            cibw-before-build: 'python -m pip install toml && python update_deps.py'

          # Linux for Python 3.10 (builds sdist by default)
          - os: ubuntu-latest
            cibw-build: 'cp310-*'
            numpy-constraint: 'numpy>=2.0.0'
            onnx-constraint: 'onnxruntime>=1.19.0'
            cibw-repair-command: ''
            cibw-manylinux-image: 'manylinux_2_31'
            cibw-before-build: 'python -m pip install toml && python update_deps.py'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: python -m pip install --upgrade pip cibuildwheel toml

      - name: Create pre-build script to update dependencies
        run: |
          cat << 'EOF' > update_deps.py
          import toml
          import os
          import sys
          pyproject_path = 'pyproject.toml'
          numpy_constraint = os.environ['NUMPY_CONSTRAINT']
          onnx_constraint = os.environ['ONNX_CONSTRAINT']
          github_run_number = os.environ.get('GITHUB_RUN_NUMBER')
          github_ref = os.environ.get('GITHUB_REF')
          with open(pyproject_path, 'r') as f:
              data = toml.load(f)
          if github_ref == 'refs/heads/master' and github_run_number:
              base_version = str(data['project']['version'])
              if '.dev' in base_version:
                  base_version = base_version.split('.dev')[0]
              new_version = f"{base_version}.dev{github_run_number}"
              data['project']['version'] = new_version
              print(f"Set version to {new_version}", file=sys.stderr)
          dependencies = data['project']['dependencies']
          dependencies = [d for d in dependencies if not d.startswith('numpy') and not d.startswith('onnxruntime')]
          dependencies.append(numpy_constraint)
          dependencies.append(onnx_constraint)
          data['project']['dependencies'] = dependencies
          with open(pyproject_path, 'w') as f:
              toml.dump(data, f)
          print("Updated pyproject.toml dependencies:", file=sys.stderr)
          for dep in data['project']['dependencies']:
              print(f"- {dep}", file=sys.stderr)
          EOF
        shell: bash

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.cibw-build }}
          CIBW_MACOS_MIN: ${{ matrix.cibw-macos-min }}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ${{ matrix.cibw-repair-command }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.cibw-manylinux-image }}
          CIBW_BEFORE_BUILD: ${{ matrix.cibw-before-build }}
          CIBW_ENVIRONMENT: 'NUMPY_CONSTRAINT="${{ matrix.numpy-constraint }}" ONNX_CONSTRAINT="${{ matrix.onnx-constraint }}" GITHUB_RUN_NUMBER="${{ github.run_number }}" GITHUB_REF="${{ github.ref }}"'

      - name: Upload distribution package
        uses: actions/upload-artifact@v4
        with:
          name: python-dist-${{ matrix.os }}
          path: wheelhouse/

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    needs: [build_wheels] # Depends on both wheels and the exe build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Download all wheel packages
        uses: actions/download-artifact@v4
        with:
          pattern: python-dist-*
          path: dist/
          merge-multiple: true

      - name: List downloaded files
        run: ls -R dist

      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/